generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id            String     @id @default(cuid())
  name          String
  createdAt     DateTime   @default(now())
  userId        String
  updatedAt     DateTime?  @updatedAt
  status        String     @default("draft")
  responseCount Int        @default(0)
  questions     Question[]
  answers       Answer[]
  user          User       @relation(fields: [userId], references: [id])
}

model Question {
  id            String    @id @default(cuid())
  name          String
  description   String
  min           String
  steps         Int
  max           String
  createdAt     DateTime  @default(now())
  surveyId      String
  updatedAt     DateTime? @updatedAt
  responseCount Int       @default(0)
  averageValue  Float     @default(0)
  scaleType     String    @default("default")
  scaleOptions  String[]  @default([])
  answers       Answer[]
  survey        Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String    @id @default(cuid())
  questionId String
  surveyId   String?   
  createdAt  DateTime  @default(now())
  value      Int
  updatedAt  DateTime? @updatedAt
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  survey     Survey?   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?
  role          String    @default("user")
  updatedAt     DateTime? @updatedAt
  accounts      Account[]
  sessions      Session[]
  surveys       Survey[]
  plan          Plan?     @relation("UserPlan", fields: [planId], references: [id])
  planId        String?
  planActiveUntil DateTime?
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Plan {
  id          String    @id @default(cuid())
  name        String
  price       Float
  description String
  features    String[]
  popular     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]    @relation("UserPlan")
}
